// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// AUTHENTICATION & USER MODELS
// ==========================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("USER") // USER, DEVELOPER, ADMIN

  // Relations
  accounts           Account[]
  sessions           Session[]
  documents          Document[]
  usage              Usage?
  exports            Export[]
  generatorHistory   GeneratorHistory[]
  generatorTemplates GeneratorTemplate[]
  generatorMetrics   GeneratorMetrics[]
  generatorErrors    GeneratorError[]
  userPreferences    UserPreferences?
  knowledgeSources   KnowledgeSource[]
  cacheEntries       CacheEntry[]

  @@index([email])
}

model UserPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Provider preferences
  defaultProvider   String   @default("openai")
  providerModels    Json     @default("{}") // { documentType: { provider, model } }
  temperature       Float    @default(0.7)
  maxTokensOverride Int?
  systemPromptStyle String   @default("professional")
  
  // Cost management
  monthlyCostLimit  Float?
  costAlertEmail    Boolean  @default(true)
  costAlertWebhook  String?
  
  // Performance preferences
  preferSpeed       Boolean  @default(false)
  allowFallback     Boolean  @default(true)
  cacheEnabled      Boolean  @default(true)
  
  // RAG preferences
  ragEnabled        Boolean  @default(false)
  autoRAGThreshold  Float?   @default(0.7)
  preferredStorage  String   @default("local")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==========================================
// DOCUMENT MODELS
// ==========================================

model Document {
  id        String         @id @default(cuid())
  userId    String
  title     String
  type      DocumentType
  status    DocumentStatus @default(PENDING)
  input     Json           // Stores the user input/configuration
  outline   Json?          // Stores the generated outline
  sections  Json?          // Stores the generated sections
  wordCount Int            @default(0)

  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Error tracking
  error     String?
  failedAt  DateTime?

  // LLM-specific fields
  provider    String?    // "openai" | "anthropic" | "gemini" | "perplexity" | "llama"
  model       String?    // "gpt-4" | "claude-3" | etc.
  temperature Float      @default(0.7)
  maxTokens   Int?

  // RAG fields
  ragEnabled       Boolean           @default(false)
  ragContext       Json?             // Stored RAG context used
  knowledgeSources KnowledgeSource[] @relation("DocumentKnowledgeSources")

  // Cache fields
  cacheKey  String?
  cachedAt  DateTime?

  // Cost tracking
  promptTokens     Int   @default(0)
  completionTokens Int   @default(0)
  totalCost        Float @default(0)

  // Queue tracking
  jobId String? // BullMQ job ID

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  exports      Export[]
  llmCalls     LLMCall[]
  embeddings   Embedding[]
  cacheEntries CacheEntry[]

  @@index([userId, status])
  @@index([type])
  @@index([createdAt])
  @@index([provider])
  @@index([status, userId])
}

model Export {
  id         String       @id @default(cuid())
  documentId String
  userId     String
  format     ExportFormat
  url        String?      // URL to download the export
  status     ExportStatus @default(PROCESSING)
  createdAt  DateTime     @default(now())
  expiresAt  DateTime?    // When the export URL expires

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([userId])
  @@index([status])
}

// ==========================================
// LLM & GENERATION TRACKING
// ==========================================

model LLMCall {
  id         String   @id @default(cuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  provider String
  model    String
  prompt   String @db.Text
  response String @db.Text

  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  cost             Float

  // Performance tracking
  duration         Int     // milliseconds
  cacheHit         Boolean @default(false)
  retryCount       Int     @default(0)
  fallbackProvider String?

  createdAt DateTime @default(now())

  @@index([documentId])
  @@index([createdAt])
  @@index([provider])
  @@index([createdAt, provider])
  @@index([documentId, cost])
}

// ==========================================
// USAGE & LIMITS
// ==========================================

model Usage {
  id             String @id @default(cuid())
  userId         String @unique
  documentsCount Int    @default(0)
  totalTokens    Int    @default(0)
  totalCost      Float  @default(0)

  // Monthly limits (reset monthly)
  monthlyDocs    Int      @default(0)
  monthlyTokens  Int      @default(0)
  monthlyResetAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ==========================================
// KNOWLEDGE & RAG SYSTEM
// ==========================================

model KnowledgeSource {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name         String
  description  String?
  type         SourceType @default(DOCUMENT)
  mimeType     String?
  originalName String?
  fileSize     Int?
  url          String?

  // Storage
  storageKey String? @unique
  content    String? @db.Text

  // Processing status
  status      ProcessingStatus @default(PENDING)
  error       String?
  processedAt DateTime?

  // Metadata
  metadata Json?
  tags     String[] @default([])

  embeddings Embedding[]
  documents  Document[]  @relation("DocumentKnowledgeSources")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

model Embedding {
  id       String          @id @default(cuid())
  sourceId String
  source   KnowledgeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  // Content and embedding
  chunkIndex Int
  content    String @db.Text
  embedding  Json   // Store as JSON, migrate to pgvector later
  
  // Metadata for better retrieval
  metadata   Json?
  tokenCount Int?

  // Optional document link
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@unique([sourceId, chunkIndex])
  @@index([sourceId])
  @@index([documentId])
}

// ==========================================
// CACHING SYSTEM
// ==========================================

model CacheEntry {
  id           String    @id @default(cuid())
  key          String    @unique
  type         String    @default("generic") // "outline" | "section" | "embedding" | "generic"
  value        Json
  provider     String
  model        String
  inputHash    String    @default("")
  hits         Int       @default(0)
  lastHit      DateTime?
  costSaved    Float     @default(0)
  userId       String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType String?
  documentId   String?
  document     Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  metadata     Json?

  @@index([expiresAt])
  @@index([provider, model])
  @@index([userId])
  @@index([type, provider, model])
  @@index([inputHash])
  @@index([documentId])
  @@index([createdAt])
}

// ==========================================
// TEMPLATES
// ==========================================

model Template {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        DocumentType
  config      Json         // Default configuration for this template
  isPublic    Boolean      @default(false)
  createdBy   String?      // User ID who created it (null for system templates)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([type, isPublic])
}

// ==========================================
// CODE GENERATOR SYSTEM
// ==========================================

model GeneratorHistory {
  id         String    @id @default(cuid())
  sessionId  String
  generator  String
  filePath   String
  content    String    @db.Text
  userId     String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  
  // Progress tracking
  progressData Json?
  completedAt  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([sessionId])
}

model GeneratorTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  generator   String
  config      Json
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name, generator])
  @@index([userId, generator])
}

model GeneratorMetrics {
  id             String   @id @default(cuid())
  generator      String
  name           String?
  userId         String
  success        Boolean  @default(true)
  preview        Boolean  @default(false)
  duration       Int
  filesGenerated Int      @default(0)
  error          String?
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([generator])
}

model GeneratorError {
  id        String   @id @default(cuid())
  sessionId String?
  generator String
  userId    String
  error     String   @db.Text
  stack     String?  @db.Text
  context   Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([generator])
  @@index([sessionId])
}

// ==========================================
// ENUMS
// ==========================================

enum DocumentType {
  BIOGRAPHY
  CASE_SUMMARY
  BUSINESS_PLAN
  MEDICAL_REPORT
  GRANT_PROPOSAL
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ExportFormat {
  PDF
  DOCX
  MARKDOWN
  HTML
  TXT
}

enum ExportStatus {
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

enum SourceType {
  DOCUMENT
  WEBSITE
  API
  MANUAL_ENTRY
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
// src/app/documents/new/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@clerk/nextjs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  FileText, 
  User, 
  Briefcase, 
  FileSearch, 
  DollarSign,
  ChevronLeft,
  Sparkles,
  Lock,
  Clock,
  AlertCircle
} from "lucide-react";
import { DocumentType } from "@/server/db/schema/documents";
import { BiographyForm } from "@/components/forms/biography-form";
import { toast } from "sonner";
import Link from "next/link";

// Document type configurations
const documentTypes = [
  {
    type: DocumentType.BIOGRAPHY,
    title: "Biography",
    description: "Create professional biographies for various purposes",
    icon: User,
    color: "bg-blue-500",
    available: true,
    estimatedTime: "2-3 minutes",
    component: BiographyForm,
  },
  {
    type: DocumentType.BUSINESS_PLAN,
    title: "Business Plan",
    description: "Generate comprehensive business plans with market analysis",
    icon: Briefcase,
    color: "bg-green-500",
    available: false,
    estimatedTime: "5-7 minutes",
    component: null, // TODO: Add BusinessPlanForm
  },
  {
    type: DocumentType.CASE_SUMMARY,
    title: "Case Summary",
    description: "Summarize legal cases with key findings and precedents",
    icon: FileSearch,
    color: "bg-purple-500",
    available: false,
    estimatedTime: "3-5 minutes",
    component: null, // TODO: Add CaseSummaryForm
  },
  {
    type: DocumentType.GRANT_PROPOSAL,
    title: "Grant Proposal",
    description: "Write compelling grant proposals with budget breakdowns",
    icon: DollarSign,
    color: "bg-orange-500",
    available: false,
    estimatedTime: "7-10 minutes",
    component: null, // TODO: Add GrantProposalForm
  },
];

export default function NewDocumentPage() {
  const router = useRouter();
  const { userId } = useAuth();
  const [selectedType, setSelectedType] = useState<DocumentType | null>(null);
  const [isCreating, setIsCreating] = useState(false);

  if (!userId) {
    router.push("/sign-in");
    return null;
  }

  const handleCreateDocument = async (data: any) => {
    if (!selectedType) return;

    setIsCreating(true);
    try {
      const response = await fetch("/api/documents", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          documentType: selectedType,
          title: data.title,
          input: data,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to create document");
      }

      const document = await response.json();
      toast.success("Document created successfully!");
      router.push(`/documents/${document.id}`);
    } catch (error) {
      toast.error("Failed to create document. Please try again.");
      setIsCreating(false);
    }
  };

  const selectedTypeConfig = documentTypes.find(t => t.type === selectedType);
  const SelectedFormComponent = selectedTypeConfig?.component;

  return (
    <div className="container max-w-7xl mx-auto py-8 px-4">
      {/* Header */}
      <div className="mb-8">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => selectedType ? setSelectedType(null) : router.back()}
          className="mb-4"
        >
          <ChevronLeft className="h-4 w-4 mr-2" />
          {selectedType ? "Choose Document Type" : "Back"}
        </Button>
        
        <h1 className="text-3xl font-bold mb-2">
          {selectedType ? `Create ${selectedTypeConfig?.title}` : "Create New Document"}
        </h1>
        <p className="text-muted-foreground">
          {selectedType 
            ? selectedTypeConfig?.description
            : "Choose a document type to get started with AI-powered generation"
          }
        </p>
      </div>

      {!selectedType ? (
        <>
          {/* Document Type Selection */}
          <div className="grid gap-6 md:grid-cols-2">
            {documentTypes.map((docType) => {
              const Icon = docType.icon;
              return (
                <Card 
                  key={docType.type}
                  className={`relative overflow-hidden transition-all cursor-pointer hover:shadow-lg ${
                    !docType.available ? "opacity-60" : ""
                  }`}
                  onClick={() => docType.available && setSelectedType(docType.type)}
                >
                  {!docType.available && (
                    <div className="absolute inset-0 bg-background/80 backdrop-blur-sm z-10 flex items-center justify-center">
                      <Badge variant="secondary" className="gap-1">
                        <Lock className="h-3 w-3" />
                        Coming Soon
                      </Badge>
                    </div>
                  )}
                  
                  <div className={`absolute top-0 right-0 w-32 h-32 ${docType.color} opacity-10 rounded-full -mr-16 -mt-16`} />
                  
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className={`h-12 w-12 rounded-lg ${docType.color} bg-opacity-20 flex items-center justify-center mb-4`}>
                        <Icon className={`h-6 w-6 ${docType.color.replace('bg-', 'text-')}`} />
                      </div>
                      {docType.available && (
                        <Badge variant="secondary" className="gap-1">
                          <Clock className="h-3 w-3" />
                          {docType.estimatedTime}
                        </Badge>
                      )}
                    </div>
                    <CardTitle>{docType.title}</CardTitle>
                    <CardDescription>{docType.description}</CardDescription>
                  </CardHeader>
                  
                  {docType.available && (
                    <CardContent>
                      <Button className="w-full" variant="secondary">
                        <Sparkles className="h-4 w-4 mr-2" />
                        Create {docType.title}
                      </Button>
                    </CardContent>
                  )}
                </Card>
              );
            })}
          </div>

          {/* Info Alert */}
          <Alert className="mt-8">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              <strong>Pro tip:</strong> Each document type uses specialized AI models trained for that specific format. 
              Choose the type that best matches your needs for optimal results.
            </AlertDescription>
          </Alert>
        </>
      ) : (
        <>
          {/* Document Creation Form */}
          {SelectedFormComponent && (
            <SelectedFormComponent
              onSubmit={handleCreateDocument}
              isSubmitting={isCreating}
            />
          )}
        </>
      )}
    </div>
  );
}
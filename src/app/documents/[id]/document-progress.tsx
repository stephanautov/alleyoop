//src/app/documents/[id]/document-progress.tsx

"use client";

import { useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "~/components/ui/card";
import { Progress } from "~/components/ui/progress";
import { Alert, AlertDescription } from "~/components/ui/alert";
import { Badge } from "~/components/ui/badge";
import { Loader2, CheckCircle, Clock, AlertCircle } from "lucide-react";
import { api } from "~/trpc/react";
import { useRouter } from "next/navigation";

interface DocumentProgressProps {
    documentId: string;
}

const progressStages = [
    { value: 5, label: "Initializing", description: "Setting up document generation" },
    { value: 20, label: "Analyzing Input", description: "Processing your requirements" },
    { value: 40, label: "Generating Outline", description: "Creating document structure" },
    { value: 70, label: "Writing Sections", description: "Generating document content" },
    { value: 90, label: "Finalizing", description: "Assembling and formatting" },
    { value: 100, label: "Complete", description: "Document ready" },
];

export function DocumentProgress({ documentId }: DocumentProgressProps) {
    const router = useRouter();

    const { data: progress } = api.document.getProgress.useQuery(
        { documentId },
        {
            refetchInterval: 2000,
        }
    );

    // Refresh page when generation completes
    useEffect(() => {
        if (progress?.status === "completed") {
            const id = setTimeout(() => router.refresh(), 1000);
            return () => clearTimeout(id);
        }
    }, [progress?.status, router]);

    const currentStage = (
        progressStages.find((stage) => (progress?.progress ?? 0) <= stage.value) ??
        progressStages[0]
    ) as (typeof progressStages)[number];

    const progressValue = progress?.progress ?? 0;
    const status = progress?.status ?? "pending";

    return (
        <Card>
            <CardHeader>
                <div className="flex items-center justify-between">
                    <div>
                        <CardTitle>Generation Progress</CardTitle>
                        <CardDescription>
                            Your document is being generated by AI
                        </CardDescription>
                    </div>
                    <Badge variant="secondary" className="flex items-center gap-1">
                        {status === "completed" ? (
                            <CheckCircle className="h-3 w-3" />
                        ) : status === "failed" ? (
                            <AlertCircle className="h-3 w-3" />
                        ) : (
                            <Loader2 className="h-3 w-3 animate-spin" />
                        )}
                        {status.charAt(0).toUpperCase() + status.slice(1)}
                    </Badge>
                </div>
            </CardHeader>
            <CardContent className="space-y-6">
                {status === "failed" ? (
                    <Alert variant="destructive">
                        <AlertCircle className="h-4 w-4" />
                        <AlertDescription>
                            {progress?.failedReason ?? "Document generation failed. Please try again."}
                        </AlertDescription>
                    </Alert>
                ) : (
                    <>
                        <div className="space-y-2">
                            <div className="flex items-center justify-between text-sm">
                                <span className="font-medium">{currentStage.label}</span>
                                <span className="text-muted-foreground">{progressValue}%</span>
                            </div>
                            <Progress value={progressValue} className="h-2" />
                            <p className="text-sm text-muted-foreground">{currentStage.description}</p>
                        </div>

                        <div className="space-y-3">
                            {progressStages.map((stage, index) => {
                                const isCompleted = progressValue >= stage.value;
                                const isCurrent = currentStage.value === stage.value;
                                const isPending = progressValue < stage.value;

                                return (
                                    <div
                                        key={stage.value}
                                        className={`flex items-start gap-3 ${isPending ? "opacity-50" : ""
                                            }`}
                                    >
                                        <div className="mt-0.5">
                                            {isCompleted ? (
                                                <CheckCircle className="h-4 w-4 text-green-500" />
                                            ) : isCurrent ? (
                                                <Loader2 className="h-4 w-4 animate-spin text-primary" />
                                            ) : (
                                                <Clock className="h-4 w-4 text-muted-foreground" />
                                            )}
                                        </div>
                                        <div className="flex-1">
                                            <p className={`text-sm ${isCurrent ? "font-medium" : ""}`}>
                                                {stage.label}
                                            </p>
                                            <p className="text-xs text-muted-foreground">
                                                {stage.description}
                                            </p>
                                        </div>
                                    </div>
                                );
                            })}
                        </div>

                        <Alert>
                            <AlertCircle className="h-4 w-4" />
                            <AlertDescription>
                                Document generation typically takes 3-5 minutes depending on length and complexity.
                                You can leave this page and come back later - we'll notify you when it's ready.
                            </AlertDescription>
                        </Alert>
                    </>
                )}
            </CardContent>
        </Card>
    );
}
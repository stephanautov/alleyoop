//src/lib/export/markdown-exporter.tsx

import type { DocumentData, Exporter } from "./index";

/**
 * Markdown Exporter Implementation
 * Exports documents to Markdown format
 */
export class MarkdownExporter implements Exporter {
    async export(data: DocumentData): Promise<Buffer> {
        // Build markdown content
        let markdown = "";

        // Title and metadata
        markdown += `# ${data.title}\n\n`;
        markdown += `**Document Type:** ${data.type}\n\n`;
        markdown += `---\n\n`;

        // Metadata section
        markdown += `## Document Information\n\n`;
        markdown += `- **Created:** ${this.formatDate(data.metadata.createdAt)}\n`;
        if (data.metadata.completedAt) {
            markdown += `- **Completed:** ${this.formatDate(data.metadata.completedAt)}\n`;
        }
        markdown += `- **Word Count:** ${data.metadata.wordCount.toLocaleString()}\n`;
        if (data.metadata.author) {
            markdown += `- **Author:** ${data.metadata.author}\n`;
        }
        markdown += `\n---\n\n`;

        // Table of Contents
        markdown += `## Table of Contents\n\n`;
        const sortedSections = [...data.sections].sort((a, b) => a.order - b.order);
        sortedSections.forEach((section, index) => {
            const anchor = this.createAnchor(section.name);
            markdown += `${index + 1}. [${section.name}](#${anchor})\n`;
        });
        markdown += `\n---\n\n`;

        // Content sections
        sortedSections.forEach((section, index) => {
            const anchor = this.createAnchor(section.name);
            markdown += `## ${index + 1}. ${section.name} {#${anchor}}\n\n`;
            markdown += this.processContent(section.content);
            markdown += `\n\n`;
        });

        // Footer
        markdown += `---\n\n`;
        markdown += `*Generated by DocuForge on ${this.formatDate(new Date())}*\n`;

        // Convert to buffer
        return Buffer.from(markdown, "utf-8");
    }

    getMimeType(): string {
        return "text/markdown";
    }

    getFileExtension(): string {
        return "md";
    }

    private formatDate(date: Date): string {
        return new Date(date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit",
        });
    }

    private createAnchor(text: string): string {
        return text
            .toLowerCase()
            .replace(/[^a-z0-9\s-]/g, "")
            .replace(/\s+/g, "-")
            .replace(/-+/g, "-")
            .trim();
    }

    private processContent(content: string): string {
        // Process the content to ensure proper markdown formatting
        let processed = content;

        // Ensure proper paragraph spacing
        processed = processed.replace(/\n(?!\n)/g, "  \n");

        // Fix list formatting
        processed = processed.replace(/^(\s*)[-•]\s*/gm, "$1- ");

        // Ensure headers have proper spacing
        processed = processed.replace(/^(#{1,6})\s*(.+)$/gm, "\n$1 $2\n");

        // Clean up excessive newlines
        processed = processed.replace(/\n{3,}/g, "\n\n");

        return processed.trim();
    }
}

/**
 * HTML Exporter Implementation
 * Exports documents to HTML format
 */
export class HtmlExporter implements Exporter {
    async export(data: DocumentData): Promise<Buffer> {
        const sortedSections = [...data.sections].sort((a, b) => a.order - b.order);

        const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${this.escapeHtml(data.title)}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
            margin-bottom: 30px;
        }
        h2 {
            color: #34495e;
            margin-top: 30px;
            margin-bottom: 15px;
        }
        .metadata {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 30px;
            font-size: 0.9em;
        }
        .metadata strong {
            color: #2c3e50;
        }
        .toc {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 30px;
        }
        .toc h2 {
            margin-top: 0;
        }
        .toc ol {
            margin: 0;
            padding-left: 20px;
        }
        .toc a {
            color: #3498db;
            text-decoration: none;
        }
        .toc a:hover {
            text-decoration: underline;
        }
        .section {
            margin-bottom: 40px;
        }
        .section-content {
            text-align: justify;
        }
        p {
            margin-bottom: 15px;
        }
        ul, ol {
            margin-bottom: 15px;
            padding-left: 30px;
        }
        .footer {
            margin-top: 50px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
            font-size: 0.85em;
            color: #666;
            text-align: center;
        }
        @media print {
            body {
                background-color: white;
            }
            .container {
                box-shadow: none;
                padding: 0;
            }
            .section {
                page-break-inside: avoid;
            }
            h2 {
                page-break-after: avoid;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>${this.escapeHtml(data.title)}</h1>
        
        <div class="metadata">
            <strong>Document Type:</strong> ${this.escapeHtml(data.type)}<br>
            <strong>Created:</strong> ${this.formatDate(data.metadata.createdAt)}<br>
            ${data.metadata.completedAt ? `<strong>Completed:</strong> ${this.formatDate(data.metadata.completedAt)}<br>` : ""}
            <strong>Word Count:</strong> ${data.metadata.wordCount.toLocaleString()}<br>
            ${data.metadata.author ? `<strong>Author:</strong> ${this.escapeHtml(data.metadata.author)}` : ""}
        </div>
        
        <div class="toc">
            <h2>Table of Contents</h2>
            <ol>
                ${sortedSections
                .map(
                    (section) =>
                        `<li><a href="#section-${section.order}">${this.escapeHtml(
                            section.name
                        )}</a></li>`
                )
                .join("\n                ")}
            </ol>
        </div>
        
        ${sortedSections
                .map(
                    (section, index) => `
        <div class="section" id="section-${section.order}">
            <h2>${index + 1}. ${this.escapeHtml(section.name)}</h2>
            <div class="section-content">
                ${this.formatContent(section.content)}
            </div>
        </div>`
                )
                .join("\n")}
        
        <div class="footer">
            Generated by DocuForge on ${this.formatDate(new Date())}
        </div>
    </div>
</body>
</html>`;

        return Buffer.from(html, "utf-8");
    }

    getMimeType(): string {
        return "text/html";
    }

    getFileExtension(): string {
        return "html";
    }

    private escapeHtml(text: string): string {
        const htmlEntities: Record<string, string> = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
        };
        return text.replace(/[&<>"']/g, (match) => htmlEntities[match] || match);
    }

    private formatDate(date: Date): string {
        return new Date(date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
    }

    private formatContent(content: string): string {
        // Escape HTML first
        let formatted = this.escapeHtml(content);

        // Convert line breaks to paragraphs
        const paragraphs = formatted.split("\n\n").filter((p) => p.trim());

        formatted = paragraphs
            .map((paragraph) => {
                // Check if it's a list
                if (paragraph.trim().startsWith("- ") || paragraph.trim().startsWith("• ")) {
                    const items = paragraph
                        .split("\n")
                        .filter((item) => item.trim())
                        .map((item) => item.replace(/^[-•]\s*/, ""));
                    return `<ul>\n${items.map((item) => `    <li>${item}</li>`).join("\n")}\n</ul>`;
                }

                // Check for numbered list
                if (/^\d+\.\s/.test(paragraph.trim())) {
                    const items = paragraph
                        .split("\n")
                        .filter((item) => item.trim())
                        .map((item) => item.replace(/^\d+\.\s*/, ""));
                    return `<ol>\n${items.map((item) => `    <li>${item}</li>`).join("\n")}\n</ol>`;
                }

                // Regular paragraph
                return `<p>${paragraph.replace(/\n/g, "<br>")}</p>`;
            })
            .join("\n");

        // Convert markdown-style formatting
        formatted = formatted.replace(/\*\*(.+?)\*\*/g, "<strong>$1</strong>");
        formatted = formatted.replace(/\*(.+?)\*/g, "<em>$1</em>");

        return formatted;
    }
}

/**
 * Plain Text Exporter Implementation
 * Exports documents to plain text format
 */
export class TxtExporter implements Exporter {
    async export(data: DocumentData): Promise<Buffer> {
        let text = "";
        const separator = "=".repeat(60) + "\n";
        const subSeparator = "-".repeat(40) + "\n";

        // Title
        text += separator;
        text += this.centerText(data.title.toUpperCase(), 60) + "\n";
        text += this.centerText(data.type, 60) + "\n";
        text += separator + "\n";

        // Metadata
        text += "DOCUMENT INFORMATION\n";
        text += subSeparator;
        text += `Created:     ${this.formatDate(data.metadata.createdAt)}\n`;
        if (data.metadata.completedAt) {
            text += `Completed:   ${this.formatDate(data.metadata.completedAt)}\n`;
        }
        text += `Word Count:  ${data.metadata.wordCount.toLocaleString()}\n`;
        if (data.metadata.author) {
            text += `Author:      ${data.metadata.author}\n`;
        }
        text += "\n" + separator + "\n";

        // Table of Contents
        text += "TABLE OF CONTENTS\n";
        text += subSeparator;
        const sortedSections = [...data.sections].sort((a, b) => a.order - b.order);
        sortedSections.forEach((section, index) => {
            text += `  ${index + 1}. ${section.name}\n`;
        });
        text += "\n" + separator + "\n";

        // Content
        sortedSections.forEach((section, index) => {
            text += `\n${index + 1}. ${section.name.toUpperCase()}\n`;
            text += subSeparator + "\n";
            text += this.formatTextContent(section.content);
            text += "\n\n";
        });

        // Footer
        text += separator;
        text += this.centerText(
            `Generated by DocuForge on ${this.formatDate(new Date())}`,
            60
        );

        return Buffer.from(text, "utf-8");
    }

    getMimeType(): string {
        return "text/plain";
    }

    getFileExtension(): string {
        return "txt";
    }

    private formatDate(date: Date): string {
        return new Date(date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
    }

    private centerText(text: string, width: number): string {
        const padding = Math.max(0, Math.floor((width - text.length) / 2));
        return " ".repeat(padding) + text;
    }

    private formatTextContent(content: string): string {
        // Clean up the content for plain text
        let formatted = content;

        // Remove any markdown formatting
        formatted = formatted.replace(/\*\*(.+?)\*\*/g, "$1");
        formatted = formatted.replace(/\*(.+?)\*/g, "$1");
        formatted = formatted.replace(/^#+\s*/gm, "");

        // Ensure proper line wrapping
        const maxLineLength = 80;
        const paragraphs = formatted.split("\n\n");

        return paragraphs
            .map((paragraph) => {
                // Handle lists specially
                if (paragraph.trim().startsWith("- ") || paragraph.trim().startsWith("• ")) {
                    return paragraph
                        .split("\n")
                        .map((item) => this.wrapText(item, maxLineLength, "  "))
                        .join("\n");
                }

                // Regular paragraphs
                return this.wrapText(paragraph, maxLineLength);
            })
            .join("\n\n");
    }

    private wrapText(text: string, maxLength: number, indent = ""): string {
        const words = text.split(" ");
        const lines: string[] = [];
        let currentLine = indent;

        for (const word of words) {
            if (currentLine.length + word.length + 1 > maxLength) {
                lines.push(currentLine);
                currentLine = indent + word;
            } else {
                currentLine += (currentLine.length > indent.length ? " " : "") + word;
            }
        }

        if (currentLine.length > indent.length) {
            lines.push(currentLine);
        }

        return lines.join("\n");
    }
}
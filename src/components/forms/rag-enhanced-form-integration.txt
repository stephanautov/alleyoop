'use client';

import React, { useState, useEffect } from 'react';
import { api } from '~/trpc/react';
import {
    BookOpen,
    Brain,
    CheckCircle,
    Info,
    Loader2,
    Search,
    X,
    Sparkles
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

// RAG Configuration Component for Document Form
export function RAGConfiguration({
    value = {},
    onChange,
    documentType
}) {
    const [ragEnabled, setRagEnabled] = useState(value.ragEnabled || false);
    const [selectedSources, setSelectedSources] = useState(value.knowledgeSourceIds || []);
    const [autoSelect, setAutoSelect] = useState(value.autoSelect !== false);
    const [showSourcePicker, setShowSourcePicker] = useState(false);

    // Fetch user's knowledge sources
    const { data: sources } = api.knowledge.list.useQuery({
        limit: 100,
        status: 'COMPLETED', // Only show processed sources
    });

    // Update parent component when config changes
    useEffect(() => {
        onChange({
            ragEnabled,
            knowledgeSourceIds: selectedSources,
            autoSelect,
        });
    }, [ragEnabled, selectedSources, autoSelect, onChange]);

    const toggleSource = (sourceId) => {
        setSelectedSources(prev =>
            prev.includes(sourceId)
                ? prev.filter(id => id !== sourceId)
                : [...prev, sourceId]
        );
    };

    const removeSource = (sourceId) => {
        setSelectedSources(prev => prev.filter(id => id !== sourceId));
    };

    return (
        <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
            {/* RAG Toggle */}
            <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                    <button
                        type="button"
                        onClick={() => setRagEnabled(!ragEnabled)}
                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${ragEnabled ? 'bg-blue-600' : 'bg-gray-200'
                            }`}
                    >
                        <span
                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${ragEnabled ? 'translate-x-6' : 'translate-x-1'
                                }`}
                        />
                    </button>
                    <div>
                        <label className="font-medium text-gray-900 flex items-center space-x-2">
                            <Brain className="h-5 w-5 text-blue-600" />
                            <span>Enable RAG Enhancement</span>
                            <Sparkles className="h-4 w-4 text-yellow-500" />
                        </label>
                        <p className="text-sm text-gray-600">
                            Use your knowledge base to enhance document generation
                        </p>
                    </div>
                </div>
            </div>

            {/* RAG Options (shown when enabled) */}
            <AnimatePresence>
                {ragEnabled && (
                    <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="space-y-4"
                    >
                        {/* Auto-select toggle */}
                        <div className="flex items-center space-x-3">
                            <input
                                type="checkbox"
                                id="autoSelect"
                                checked={autoSelect}
                                onChange={(e) => setAutoSelect(e.target.checked)}
                                className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
                            />
                            <label htmlFor="autoSelect" className="text-sm text-gray-700">
                                Automatically select relevant sources based on document content
                            </label>
                        </div>

                        {/* Manual source selection */}
                        {!autoSelect && (
                            <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                    <label className="text-sm font-medium text-gray-700">
                                        Select Knowledge Sources
                                    </label>
                                    <button
                                        type="button"
                                        onClick={() => setShowSourcePicker(!showSourcePicker)}
                                        className="text-sm text-blue-600 hover:text-blue-700"
                                    >
                                        {showSourcePicker ? 'Hide' : 'Browse'} Sources
                                    </button>
                                </div>

                                {/* Selected sources */}
                                {selectedSources.length > 0 && (
                                    <div className="flex flex-wrap gap-2">
                                        {selectedSources.map(sourceId => {
                                            const source = sources?.sources.find(s => s.id === sourceId);
                                            if (!source) return null;

                                            return (
                                                <span
                                                    key={sourceId}
                                                    className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-700"
                                                >
                                                    <BookOpen className="h-3 w-3 mr-1" />
                                                    {source.name}
                                                    <button
                                                        type="button"
                                                        onClick={() => removeSource(sourceId)}
                                                        className="ml-2 hover:text-blue-900"
                                                    >
                                                        <X className="h-3 w-3" />
                                                    </button>
                                                </span>
                                            );
                                        })}
                                    </div>
                                )}

                                {/* Source picker */}
                                {showSourcePicker && sources?.sources && (
                                    <div className="border rounded-lg p-3 max-h-60 overflow-y-auto space-y-2">
                                        {sources.sources.length === 0 ? (
                                            <p className="text-sm text-gray-500 text-center py-4">
                                                No knowledge sources available. Upload some documents first!
                                            </p>
                                        ) : (
                                            sources.sources.map(source => (
                                                <label
                                                    key={source.id}
                                                    className="flex items-start space-x-3 p-2 hover:bg-gray-50 rounded cursor-pointer"
                                                >
                                                    <input
                                                        type="checkbox"
                                                        checked={selectedSources.includes(source.id)}
                                                        onChange={() => toggleSource(source.id)}
                                                        className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500 mt-0.5"
                                                    />
                                                    <div className="flex-1">
                                                        <div className="font-medium text-sm text-gray-900">
                                                            {source.name}
                                                        </div>
                                                        {source.description && (
                                                            <div className="text-xs text-gray-500">
                                                                {source.description}
                                                            </div>
                                                        )}
                                                        <div className="text-xs text-gray-400 mt-1">
                                                            {source._count.embeddings} chunks â€¢ {source.type}
                                                        </div>
                                                    </div>
                                                </label>
                                            ))
                                        )}
                                    </div>
                                )}
                            </div>
                        )}

                        {/* RAG Info */}
                        <div className="bg-blue-50 p-3 rounded-lg">
                            <div className="flex items-start space-x-2">
                                <Info className="h-4 w-4 text-blue-600 mt-0.5" />
                                <div className="text-sm text-blue-900">
                                    <p className="font-medium">How RAG Enhancement Works:</p>
                                    <ul className="mt-1 space-y-1 text-blue-800">
                                        <li>â€¢ Searches your knowledge base for relevant information</li>
                                        <li>â€¢ Incorporates found content into the document generation</li>
                                        <li>â€¢ Provides more accurate and personalized results</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </motion.div>
                )}
            </AnimatePresence>
        </div>
    );
}

// RAG Search Preview Component
export function RAGSearchPreview({
    documentType,
    formData,
    knowledgeSourceIds,
    autoSelect
}) {
    const [searching, setSearching] = useState(false);
    const [results, setResults] = useState(null);

    const searchMutation = api.knowledge.search.useMutation({
        onSuccess: (data) => {
            setResults(data);
            setSearching(false);
        },
        onError: () => {
            setSearching(false);
        },
    });

    const handlePreviewSearch = () => {
        // Build search query based on document type and form data
        let query = '';

        switch (documentType) {
            case 'BIOGRAPHY':
                query = formData.subjectName || '';
                break;
            case 'BUSINESS_PLAN':
                query = `${formData.businessName || ''} ${formData.industry || ''}`;
                break;
            case 'GRANT_PROPOSAL':
                query = `${formData.projectTitle || ''} ${formData.focusArea || ''}`;
                break;
            default:
                query = formData.title || '';
        }

        if (query.trim()) {
            setSearching(true);
            searchMutation.mutate({
                query: query.trim(),
                sourceIds: autoSelect ? undefined : knowledgeSourceIds,
                limit: 3,
            });
        }
    };

    return (
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
            <div className="flex items-center justify-between mb-3">
                <h4 className="font-medium text-gray-900">RAG Context Preview</h4>
                <button
                    type="button"
                    onClick={handlePreviewSearch}
                    disabled={searching}
                    className="text-sm text-blue-600 hover:text-blue-700 flex items-center space-x-1"
                >
                    {searching ? (
                        <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                        <Search className="h-4 w-4" />
                    )}
                    <span>Preview Search</span>
                </button>
            </div>

            {results && (
                <div className="space-y-2">
                    {results.results.length === 0 ? (
                        <p className="text-sm text-gray-500">
                            No relevant content found in your knowledge base.
                        </p>
                    ) : (
                        <>
                            <p className="text-sm text-gray-600">
                                Found {results.totalResults} relevant results. Top matches:
                            </p>
                            {results.results.map((result, index) => (
                                <div
                                    key={result.id}
                                    className="p-3 bg-white rounded border text-sm"
                                >
                                    <div className="flex items-start justify-between">
                                        <div className="flex-1">
                                            <div className="font-medium text-gray-900">
                                                {result.source.name}
                                            </div>
                                            <p className="text-gray-600 mt-1 line-clamp-2">
                                                {result.content}
                                            </p>
                                        </div>
                                        <span className="text-xs text-gray-500 ml-2">
                                            {(result.similarity * 100).toFixed(0)}%
                                        </span>
                                    </div>
                                </div>
                            ))}
                        </>
                    )}
                </div>
            )}
        </div>
    );
}

// Integration with existing document form
export function DocumentFormWithRAG({
    children,
    documentType,
    formData,
    onRAGConfigChange
}) {
    const [ragConfig, setRagConfig] = useState({
        ragEnabled: false,
        knowledgeSourceIds: [],
        autoSelect: true,
    });

    const handleRAGConfigChange = (config) => {
        setRagConfig(config);
        onRAGConfigChange?.(config);
    };

    return (
        <div className="space-y-6">
            {/* Existing form fields */}
            {children}

            {/* RAG Configuration Section */}
            <div className="border-t pt-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Knowledge Enhancement (Optional)
                </h3>

                <RAGConfiguration
                    value={ragConfig}
                    onChange={handleRAGConfigChange}
                    documentType={documentType}
                />

                {/* Show preview when RAG is enabled */}
                {ragConfig.ragEnabled && formData && (
                    <RAGSearchPreview
                        documentType={documentType}
                        formData={formData}
                        knowledgeSourceIds={ragConfig.knowledgeSourceIds}
                        autoSelect={ragConfig.autoSelect}
                    />
                )}
            </div>
        </div>
    );
}